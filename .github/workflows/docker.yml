---
name: Docker

on:
  # See: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch
  workflow_dispatch:

  # See: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#push
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
    branches: [ "main" ]
    
jobs:
  lint:
    name: hadolint
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Docker Lint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker/Dockerfile
          config: docker/.hadolint.yaml
          failure-threshold: error

  shellcheck:
    name: ShellCheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - run: cp .env.docker .env

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        env:
          SHELLCHECK_OPTS: --shell=bash --external-sources
        with:
          version: v0.9.0
          additional_files: "*.envsh .env .env.docker .env.example .env.testing"

  bats:
    name: Bats Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run bats
        run: docker run -v "$PWD/docker/:/var/www" bats/bats:latest /var/www/tests/bats

  build:
    name: Build, Test, and Push
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

      # See: https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
      matrix:
        php_version:
          - 8.4
        debian_release:
          - bookworm
        target_runtime:
          - fpm
          - nginx
        php_base:
          - fpm

    # See: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-concurrency-and-the-default-behavior
    concurrency:
      group: docker-build-${{ github.ref }}-${{ matrix.php_base }}-${{ matrix.php_version }}-${{ matrix.target_runtime }}
      cancel-in-progress: true

    permissions:
      contents: read
      packages: write

    env:
      HAS_DOCKER_HUB_CONFIGURED: false

      PREFERRED_PHP_VERSION: 8.4

      PREFERRED_TARGET_RUNTIME: nginx

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set version
        id: pixelfed_version
        run: echo "PIXELFED_VERSION=$(git describe --tags | sed -En "s/v(.*)-glitch/\1+glitch/p")" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          version: v0.12.0 # *or* newer, needed for annotations to work

        # See: https://github.com/docker/login-action?tab=readme-ov-file#github-container-registry
      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            name=ghcr.io/${{ github.repository }},enable=true
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') &&
                                            matrix.target_runtime == env.PREFERRED_TARGET_RUNTIME &&
                                            matrix.php_version == env.PREFERRED_PHP_VERSION }}
            type=raw,value=nightly,enable=${{ github.ref == format('refs/heads/{0}', 'staging') &&
                                            matrix.target_runtime == env.PREFERRED_TARGET_RUNTIME &&
                                            matrix.php_version == env.PREFERRED_PHP_VERSION }}
            type=raw,value=develop,enable=${{ github.ref == format('refs/heads/{0}', 'develop') &&
                                            matrix.target_runtime == env.PREFERRED_TARGET_RUNTIME &&
                                            matrix.php_version == env.PREFERRED_PHP_VERSION }}
            type=semver,pattern={{version}},enable=${{ matrix.target_runtime == env.PREFERRED_TARGET_RUNTIME &&
                                            matrix.php_version == env.PREFERRED_PHP_VERSION }}
            type=raw,value=latest,prefix=${{ matrix.target_runtime }}-,enable=${{ github.ref == format('refs/heads/{0}', 'main') && matrix.php_version == env.PREFERRED_PHP_VERSION }}
            type=raw,value=nightly,prefix=${{ matrix.target_runtime }}-,enable=${{ github.ref == format('refs/heads/{0}', 'staging') && matrix.php_version == env.PREFERRED_PHP_VERSION }}
            type=raw,value=develop,prefix=${{ matrix.target_runtime }}-,enable=${{ github.ref == format('refs/heads/{0}', 'develop') && matrix.php_version == env.PREFERRED_PHP_VERSION }}
            type=raw,value=latest,prefix=${{ matrix.target_runtime }}-${{ matrix.php_version }}-,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=nightly,prefix=${{ matrix.target_runtime }}-${{ matrix.php_version }}-,enable=${{ github.ref == format('refs/heads/{0}', 'staging') }}
            type=raw,value=develop,prefix=${{ matrix.target_runtime }}-${{ matrix.php_version }}-,enable=${{ github.ref == format('refs/heads/{0}', 'develop') }}
            type=semver,pattern={{version}},prefix=${{ matrix.target_runtime }}-,enable=${{ matrix.php_version == env.PREFERRED_PHP_VERSION }}
            type=semver,pattern={{version}},prefix=${{ matrix.target_runtime }}-${{ matrix.php_version }}-
            type=ref,event=pr,prefix=${{ matrix.target_runtime }}-${{ matrix.php_version }}-pr-
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          target: ${{ matrix.target_runtime }}-runtime
          platforms: linux/amd64 #,linux/arm64
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          push: true
          sbom: true
          provenance: true
          build-args: |
            PHP_VERSION=${{ matrix.php_version }}
            PHP_BASE_TYPE=${{ matrix.php_base }}
            PIXELFED_VERSION=${{ steps.pixelfed_version.outputs.PIXELFED_VERSION }}

      - name: Setup
        run: docker/tests/setup.sh
        env:
          CI: true
          DOCKER_APP_TAG: "${{ steps.meta.outputs.version }}"

      # goss validate the image
      #
      # See: https://github.com/goss-org/goss
      - uses: e1himself/goss-installation-action@v1
        with:
          version: "v0.4.9"

      - name: Execute Goss tests
        working-directory: docker/
        run: tests/goss.sh
        env:
          TAGS: "${{ steps.meta.outputs.tags }}"
          DOCKER_APP_PHP_VERSION: ${{ matrix.php_version }}
          PHP_BASE_TYPE: ${{ matrix.php_base }}
